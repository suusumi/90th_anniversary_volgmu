import { Box, Typography } from "@mui/material";
import React, {useEffect, useRef, useState} from "react";
import gsap from "gsap";
import {getRemainingBlood} from "../model/getRemainingBlood.ts";

export const ContributionCard: React.FC = () => {
    const containerRef = useRef(null);
    const [remainingBlood, setRemainingBlood] = useState<number | null>(null);

    useEffect(() => {
        const ctx = gsap.context(() => {
            const messages = gsap.utils.toArray(".message");

            gsap.from(messages, {
                opacity: 0,
                y: 30,
                duration: 1.2,
                ease: "power3.out",
                stagger: 0.5, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            });
        }, containerRef);

        return () => ctx.revert();
    }, []);

    useEffect(() => {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ "remaining"
        const fetchRemainingBlood = async () => {
            try {
                const data = await getRemainingBlood();
                setRemainingBlood(data);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
            }
        };

        fetchRemainingBlood();
    }, []);

    return (
        <Box
            ref={containerRef}
            sx={{
                position: "relative",
                overflow: "hidden",
                borderRadius: "16px",
                backgroundColor: "white",
                padding: "15px",
                textAlign: "center",
                boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.1)",
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
                height: "100%",
            }}
        >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Typography

                variant="h6"
                sx={{
                    marginBottom: "15px",
                    position: "relative",
                    zIndex: 2, // –¢–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö
                }}
            >
                –í–Ω–µ—Å–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥
            </Typography>

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ "–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å?" */}
            <Box
                className="message"
                sx={{
                    backgroundColor: "#CCFFE9", // –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
                    color: "#10633F", // –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π —Ç–µ–∫—Å—Ç
                    padding: "10px 20px",
                    borderRadius: "20px",
                    maxWidth: "80%",
                    alignSelf: "flex-start", // –í—ã—Ä–æ–≤–Ω—è—Ç—å —Å–ª–µ–≤–∞
                    fontSize: "16px",
                    fontWeight: "bold",
                    marginBottom: "15px",
                }}
            >
                –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å?
            </Box>

            {/* –û—Ç–≤–µ—Ç: "69,4 –ª–∏—Ç—Ä–æ–≤!" */}
            <Box
                className="message"
                sx={{
                    backgroundColor: "#CCFFE9",
                    color: "#10633F",
                    padding: "10px 20px",
                    borderRadius: "20px",
                    maxWidth: "80%",
                    alignSelf: "flex-end",
                    fontSize: "16px",
                    display: "flex",
                    alignItems: "center",
                    gap: "5px",
                }}
            >
                <Typography sx={{ fontSize: "16px", fontWeight: "bold" }}>
                    {remainingBlood !== null
                        ? `${remainingBlood.toFixed(1)} –ª–∏—Ç—Ä–æ–≤!`
                        : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
                </Typography>
                <Typography component="span" sx={{ fontSize: "16px" }}>
                    üî•üî•üî•
                </Typography>
            </Box>
        </Box>
    );
};